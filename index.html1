<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Vishal AI Hub — Free All-in-One Tools</title>
<meta name="description" content="Vishal AI Hub - 30+ free browser tools: summarizer, grammar, TTS, STT, image tools, QR, password, color palette & more." />
<link rel="icon" href="data:,">
<style>
  :root{
    --bg:#f7f9fc; --card:#fff; --accent:#0b63ff; --muted:#6b7280; --shadow: 0 6px 18px rgba(9,30,66,.08);
  }
  [data-theme="dark"]{ --bg:#0b1220; --card:#071226; --accent:#3aa0ff; --muted:#9aa7b2; --shadow: 0 8px 30px rgba(2,6,23,.6); color:#dbe7ff;}
  *{box-sizing:border-box}
  body{margin:0;font-family:Inter, system-ui, Arial;background:var(--bg); color: #0b1b2b; transition: .2s}
  header{background: linear-gradient(90deg, rgba(11,99,255,.12), rgba(10,150,255,.06)); padding:18px 16px; display:flex; align-items:center; justify-content:space-between; gap:12px; flex-wrap:wrap}
  .brand{display:flex;align-items:center;gap:12px}
  .logo{width:46px;height:46px;border-radius:10px;background:var(--accent);display:flex;align-items:center;justify-content:center;color:#fff;font-weight:700;box-shadow:var(--shadow)}
  h1{font-size:18px;margin:0}
  p.lead{margin:0;color:var(--muted); font-size:13px}
  .controls{display:flex;gap:8px;align-items:center}
  .search{padding:8px 12px;border-radius:10px;border:1px solid #e6eefb;background:#fff;min-width:200px}
  .btn{background:var(--accent);color:#fff;padding:8px 12px;border-radius:8px;border:none;cursor:pointer}
  .small{padding:6px 8px;background:transparent;border:1px solid rgba(0,0,0,.06);border-radius:8px}
  main{padding:18px;max-width:1100px;margin:12px auto}
  .grid{display:grid;grid-template-columns: repeat(auto-fit,minmax(260px,1fr)); gap:14px}
  .card{background:var(--card);padding:14px;border-radius:12px;box-shadow:var(--shadow);min-height:120px;display:flex;flex-direction:column;gap:8px}
  .card h3{margin:0;font-size:16px}
  .card p{margin:0;color:var(--muted);font-size:13px}
  .tools-area{margin-top:18px;background:transparent}
  .tool-panel{background:var(--card);padding:14px;border-radius:12px;box-shadow:var(--shadow); margin-top:12px}
  textarea,input,select{width:100%;padding:10px;border-radius:8px;border:1px solid #e6eefb;background:transparent;resize:vertical}
  .row{display:flex;gap:8px}
  .row > *{flex:1}
  .actions{display:flex;gap:8px;flex-wrap:wrap}
  footer{text-align:center;padding:18px;color:var(--muted)}
  .hint{font-size:12px;color:var(--muted)}
  @media(max-width:640px){ .search{min-width:120px} .brand h1{font-size:16px} }
</style>
</head>
<body>

<header>
  <div class="brand">
    <div class="logo">VA</div>
    <div>
      <h1>Vishal AI Hub</h1>
      <p class="lead">30+ Free browser tools — instant, privacy-first, no signup</p>
    </div>
  </div>

  <div class="controls">
    <input id="globalSearch" class="search" placeholder="Search tools (e.g., summarize, qr, tts)"/>
    <button id="darkToggle" class="small">Dark</button>
    <button id="openAll" class="btn">Open Top Tools</button>
  </div>
</header>

<main>
  <section class="grid" id="toolCards">
    <!-- cards injected by JS -->
  </section>

  <div class="tools-area" id="toolsArea">
    <div class="tool-panel" id="toolPanelIntro">
      <h2>How to use</h2>
      <p class="hint">Click any tool card above to open that tool here. Most tools work fully in your browser (no server). For voice features use Chrome/Edge on mobile or desktop for best compatibility.</p>
    </div>
  </div>
</main>

<footer>
  Built with ❤️ by Vishal · Tip: Test on mobile and add to Home Screen (PWA-like).
</footer>

<script>
/* ======= Tool Definitions ======= */
const tools = [
  {id:'txt-summarizer', title:'Text Summarizer', desc:'Summarize long text into short bullets', fn:renderSummarizer},
  {id:'grammar-check', title:'Grammar & Spell (basic)', desc:'Find repeated spaces, long sentences, simple suggestions', fn:renderGrammar},
  {id:'tts', title:'Text to Speech (TTS)', desc:'Listen to text using your browser', fn:renderTTS},
  {id:'stt', title:'Speech to Text (STT)', desc:'Record voice and convert to text (Chrome)', fn:renderSTT},
  {id:'paraphrase', title:'Quick Paraphraser', desc:'Make alternative versions of text (simple)', fn:renderParaphrase},
  {id:'text-gen', title:'Text Idea Generator', desc:'Generate blog titles, captions, emails', fn:renderTextGen},
  {id:'word-count', title:'Word/Char Counter', desc:'Count words, chars, reading time', fn:renderCounter},
  {id:'lorem', title:'Lorem Ipsum Generator', desc:'Generate placeholder text', fn:renderLorem},
  {id:'slug', title:'Slug / URL Generator', desc:'Create SEO-friendly slug', fn:renderSlug},
  {id:'meta', title:'Meta Tag Generator', desc:'Generate meta title & description', fn:renderMeta},
  {id:'email-writer', title:'Email Writer (templates)', desc:'Create professional emails quickly', fn:renderEmailWriter},
  {id:'password-gen', title:'Password Generator', desc:'Strong random password', fn:renderPassword},
  {id:'qr', title:'QR Code Generator', desc:'Create QR code image (open in new tab)', fn:renderQR},
  {id:'base64', title:'Base64 Encode / Decode', desc:'Encode or decode text', fn:renderBase64},
  {id:'jsonfmt', title:'JSON Formatter & Validator', desc:'Pretty-print and validate JSON', fn:renderJSON},
  {id:'markdown', title:'Markdown → HTML', desc:'Convert Markdown to HTML preview', fn:renderMarkdown},
  {id:'keyword', title:'Keyword Finder (basic)', desc:'Extract repeated keywords', fn:renderKeywords},
  {id:'color-palette', title:'Color Palette From Image', desc:'Upload image to extract main colors', fn:renderPalette},
  {id:'img-compress', title:'Image Compressor / Resize', desc:'Compress or resize images client-side', fn:renderImageCompress},
  {id:'img-to-webp', title:'Convert Image → WebP', desc:'Convert images to webp in browser', fn:renderImageWebP},
  {id:'img-grayscale', title:'Image → Grayscale', desc:'Turn image to grayscale', fn:renderImageGray},
  {id:'img-resize', title:'Image Resize', desc:'Resize image to custom width/height', fn:renderImageResize},
  {id:'resume', title:'Resume Builder (simple)', desc:'Fill fields and download plain resume', fn:renderResume},
  {id:'seo-check', title:'SEO Meta Checker', desc:'Check title/desc length and suggestions', fn:renderSEOCheck},
  {id:'password-check', title:'Password Strength Check', desc:'Analyze password strength', fn:renderPassCheck},
  {id:'read-aloud', title:'Read Aloud (focus)', desc:'Auto-read long article with controls', fn:renderReadAloud},
  {id:'image-edit-links', title:'Advanced Image Tools', desc:'Links to background remove and advanced editors', fn:renderImageLinks},
  {id:'tools-ideas', title:'AI Tools Ideas', desc:'Generate product/tool ideas quickly', fn:renderToolIdeas},
  {id:'json-to-csv', title:'JSON → CSV', desc:'Convert JSON array to CSV', fn:renderJsonToCsv},
  {id:'color-picker', title:'Color Picker', desc:'Pick color & get codes', fn:renderColorPicker}
];

/* ======= Create tool cards ======= */
const cards = document.getElementById('toolCards');
tools.forEach(t=>{
  const el = document.createElement('div');
  el.className='card';
  el.innerHTML = `<h3>${t.title}</h3><p>${t.desc}</p><div style="margin-top:auto;display:flex;justify-content:space-between;align-items:center"><button class="btn" data-tool="${t.id}">Open</button><button class="small" data-tool="${t.id}">Try</button></div>`;
  cards.appendChild(el);
});
document.querySelectorAll('[data-tool]').forEach(btn=>{
  btn.addEventListener('click',e=>{
    const id = e.currentTarget.getAttribute('data-tool');
    openTool(id);
  });
});

/* ======= Search & Open Top ======= */
document.getElementById('globalSearch').addEventListener('input',e=>{
  const q = e.target.value.trim().toLowerCase();
  Array.from(cards.children).forEach(card=>{
    const title = card.querySelector('h3').innerText.toLowerCase();
    const desc = card.querySelector('p').innerText.toLowerCase();
    card.style.display = (title.includes(q)||desc.includes(q)) ? '' : 'none';
  });
});
document.getElementById('openAll').addEventListener('click',()=>{
  // open summarizer first
  openTool('txt-summarizer');
});

/* ======= Theme toggle ======= */
const dt = document.documentElement;
const darkBtn = document.getElementById('darkToggle');
darkBtn.addEventListener('click',()=>{
  if(dt.getAttribute('data-theme')==='dark'){ dt.removeAttribute('data-theme'); darkBtn.innerText='Dark'; }
  else{ dt.setAttribute('data-theme','dark'); darkBtn.innerText='Light'; }
});

/* ======= Main open function ======= */
function openTool(id){
  const tool = tools.find(t=>t.id===id);
  const area = document.getElementById('toolsArea');
  area.innerHTML = `<div class="tool-panel"><h2>${tool.title}</h2><p class="hint">${tool.desc}</p><div id="toolInner"></div></div>`;
  const inner = document.getElementById('toolInner');
  try{ tool.fn(inner); } catch(err){ inner.innerText='Error loading tool: '+err }
  window.scrollTo({top:area.offsetTop-20, behavior:'smooth'});
}

/* ======= Individual Tool Renderers ======= */

/* Summarizer: simple extractive by sentence scoring */
function renderSummarizer(container){
  container.innerHTML = `
    <textarea id="sumInput" rows=6 placeholder="Paste long text here..."></textarea>
    <div class="row" style="margin-top:8px"><input id="sumCount" placeholder="Max sentences (default 3)"/></div>
    <div class="actions" style="margin-top:8px"><button class="btn" id="doSumm">Summarize</button><button class="small" id="clearSum">Clear</button></div>
    <h3>Summary</h3><div id="sumOut" style="white-space:pre-wrap;background:var(--card);padding:10px;border-radius:8px"></div>
  `;
  document.getElementById('doSumm').onclick = ()=>{
    const txt = document.getElementById('sumInput').value.trim();
    if(!txt){ alert('Paste some text first'); return; }
    const n = parseInt(document.getElementById('sumCount').value) || 3;
    const sents = txt.match(/[^\\.\\!?]+[\\.\\!?]?/g) || [txt];
    // score by word overlap with top freq words
    const words = txt.toLowerCase().replace(/[^a-z0-9\\s]/g,' ').split(/\s+/).filter(Boolean);
    const freq = {};
    words.forEach(w=>freq[w]=(freq[w]||0)+1);
    const topWords = Object.keys(freq).sort((a,b)=>freq[b]-freq[a]).slice(0,50);
    const scores = sents.map(s=>{
      const ws = s.toLowerCase().split(/\\s+/);
      let sc=0;
      ws.forEach(w=>{ if(topWords.includes(w)) sc += (freq[w]||0); });
      sc += Math.min(2, s.length/100); // prefer longer sentences a bit
      return {s,sc};
    });
    scores.sort((a,b)=>b.sc-a.sc);
    const out = scores.slice(0,n).map(x=>x.s.trim()).join(' ');
    document.getElementById('sumOut').innerText = out;
  };
  document.getElementById('clearSum').onclick = ()=>{ document.getElementById('sumInput').value=''; document.getElementById('sumOut').innerText=''; };
}

/* Grammar (very basic checks) */
function renderGrammar(container){
  container.innerHTML = `
    <textarea id="gramInput" rows=6 placeholder="Paste text to check..."></textarea>
    <div class="actions" style="margin-top:8px">
      <button class="btn" id="doGram">Check</button>
      <button class="small" id="fixSpaces">Fix double spaces</button>
    </div>
    <h3>Issues</h3><div id="gramOut" style="white-space:pre-wrap;padding:10px;border-radius:8px;background:var(--card)"></div>
  `;
  document.getElementById('doGram').onclick = ()=>{
    const t = document.getElementById('gramInput').value;
    if(!t){ alert('Paste text'); return; }
    const issues=[];
    if(/\s{2,}/.test(t)) issues.push('Contains multiple consecutive spaces.');
    const sentences = t.match(/[^\\.\\!?]+[\\.\\!?]?/g) || [];
    sentences.forEach((s,i)=>{
      if(s.trim().length>300) issues.push(`Sentence ${i+1} is very long (${s.trim().length} chars) consider splitting.`);
      if(/^[a-z]/.test(s.trim())) issues.push(`Sentence ${i+1} starts with a lowercase letter.`);
    });
    // repeated words
    if(/\\b(\\w+)\\s+\\1\\b/i.test(t)) issues.push('Possible repeated word found (e.g., "the the").');
    document.getElementById('gramOut').innerText = issues.length ? issues.join('\\n') : 'No simple issues found.';
  };
  document.getElementById('fixSpaces').onclick = ()=>{
    document.getElementById('gramInput').value = document.getElementById('gramInput').value.replace(/\\s{2,}/g,' ');
  };
}

/* TTS */
function renderTTS(container){
  container.innerHTML = `
    <textarea id="ttsText" rows=4 placeholder="Enter text to speak...">Hello! This is Vishal AI Hub speaking.</textarea>
    <div class="row" style="margin-top:8px">
      <select id="voiceSelect"></select>
      <input id="rate" type="number" value="1" step="0.1" />
    </div>
    <div class="actions" style="margin-top:8px"><button class="btn" id="speakBtn">Speak</button><button class="small" id="stopBtn">Stop</button></div>
  `;
  const synth = window.speechSynthesis;
  function populateVoices(){
    const sel = document.getElementById('voiceSelect'); sel.innerHTML='';
    (synth.getVoices()||[]).forEach((v,i)=>{ const o=document.createElement('option'); o.value=i; o.innerText = v.name+' ('+v.lang+')'; sel.appendChild(o);});
  }
  populateVoices(); if(speechSynthesis.onvoiceschanged!==undefined) speechSynthesis.onvoiceschanged = populateVoices;
  document.getElementById('speakBtn').onclick = ()=>{
    const text = document.getElementById('ttsText').value;
    if(!text) return alert('Enter text');
    const u = new SpeechSynthesisUtterance(text);
    const v = synth.getVoices()[document.getElementById('voiceSelect').value];
    if(v) u.voice = v;
    u.rate = parseFloat(document.getElementById('rate').value) || 1;
    synth.cancel(); synth.speak(u);
  };
  document.getElementById('stopBtn').onclick = ()=>{ synth.cancel(); };
}

/* STT (SpeechRecognition) */
function renderSTT(container){
  container.innerHTML = `
    <div><button class="btn" id="recBtn">Start Recording</button> <button class="small" id="stopRec">Stop</button></div>
    <textarea id="sttOut" rows=6 placeholder="Recognized text will appear here..."></textarea>
    <p class="hint">Works best on Chrome/Edge. Allow microphone access.</p>
  `;
  const recBtn = document.getElementById('recBtn');
  const stopBtn = document.getElementById('stopRec');
  const out = document.getElementById('sttOut');
  let recog;
  if(!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)){
    out.value = 'SpeechRecognition not supported in this browser.';
    recBtn.disabled=true;
    stopBtn.disabled=true;
    return;
  }
  const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
  recog = new SR();
  recog.continuous = true;
  recog.interimResults = true;
  recog.lang = 'en-US';
  recog.onresult = (e)=>{
    let txt='';
    for(let i=0;i<e.results.length;i++){ txt += e.results[i][0].transcript; }
    out.value = txt;
  };
  recBtn.onclick = ()=>{ recog.start(); recBtn.innerText='Recording...'; };
  stopBtn.onclick = ()=>{ recog.stop(); recBtn.innerText='Start Recording'; };
}

/* Paraphrase (very simple synonym replacement) */
function renderParaphrase(container){
  container.innerHTML = `
    <textarea id="paraIn" rows=5 placeholder="Enter sentence to paraphrase..."></textarea>
    <div class="actions" style="margin-top:8px"><button class="btn" id="doPara">Paraphrase</button><button class="small" id="swapPara">Clear</button></div>
    <h3>Result</h3><div id="paraOut" style="padding:8px;background:var(--card);border-radius:8px"></div>
  `;
  const map = { good:['great','excellent','nice'], bad:['poor','weak','subpar'], help:['assist','aid','support'], use:['utilize','employ','apply'], create:['build','make','develop'] };
  document.getElementById('doPara').onclick = ()=>{
    let t = document.getElementById('paraIn').value;
    if(!t) return alert('Enter text');
    Object.keys(map).forEach(k=>{
      const re = new RegExp('\\b'+k+'\\b','gi');
      t = t.replace(re, (m)=> { const arr = map[k]; return arr[Math.floor(Math.random()*arr.length)]; });
    });
    document.getElementById('paraOut').innerText = t;
  };
  document.getElementById('swapPara').onclick = ()=>{ document.getElementById('paraIn').value=''; document.getElementById('paraOut').innerText=''; };
}

/* Text idea generator */
function renderTextGen(container){
  container.innerHTML = `
    <input id="ideaTopic" placeholder="Topic (e.g., cooking, finance)"/>
    <div class="actions" style="margin-top:8px"><button class="btn" id="genIdeas">Generate Titles</button></div>
    <div id="ideaOut" style="margin-top:8px;white-space:pre-wrap"></div>
  `;
  document.getElementById('genIdeas').onclick = ()=>{
    const top = document.getElementById('ideaTopic').value.trim() || 'product';
    const templates = [
      `10 ${top} Tips You Didn’t Know`,
      `How to Master ${top} in 7 Days`,
      `The Ultimate ${top} Checklist`,
      `Beginner’s Guide to ${top}`,
      `${top} Hacks for Busy People`,
      `Save Money on ${top}: Practical Ways`
    ];
    document.getElementById('ideaOut').innerText = templates.join('\\n\\n');
  };
}

/* Counter */
function renderCounter(container){
  container.innerHTML = `
    <textarea id="cntText" rows=6 placeholder="Paste text..."></textarea>
    <div class="actions"><button class="btn" id="doCount">Count</button></div>
    <div id="cntOut" style="margin-top:8px"></div>
  `;
  document.getElementById('doCount').onclick = ()=>{
    const t = document.getElementById('cntText').value;
    const chars = t.length;
    const words = (t.trim().match(/\\S+/g)||[]).length;
    const minutes = Math.ceil(words/200);
    document.getElementById('cntOut').innerText = `Words: ${words}, Characters: ${chars}, Estimated reading: ${minutes} min`;
  };
}

/* Lorem */
function renderLorem(container){
  container.innerHTML = `
    <div class="row"><input id="lCount" placeholder="Paragraphs (1-10)" value="2"/></div>
    <div class="actions" style="margin-top:8px"><button class="btn" id="doLorem">Generate</button></div>
    <div id="lOut" style="margin-top:8px;white-space:pre-wrap"></div>
  `;
  const lipsum = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam.";
  document.getElementById('doLorem').onclick = ()=>{
    const n = Math.max(1, Math.min(10, parseInt(document.getElementById('lCount').value)||2));
    document.getElementById('lOut').innerText = Array.from({length:n}).map(()=>lipsum).join('\\n\\n');
  };
}

/* Slug */
function renderSlug(container){
  container.innerHTML = `<input id="slugIn" placeholder="Enter title..."><div class="actions" style="margin-top:8px"><button class="btn" id="doSlug">Make Slug</button></div><div id="slugOut" style="margin-top:8px"></div>`;
  document.getElementById('doSlug').onclick = ()=>{ const s = document.getElementById('slugIn').value; const slug = s.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,''); document.getElementById('slugOut').innerText = slug; };
}

/* Meta generator */
function renderMeta(container){
  container.innerHTML = `<input id="metaTitle" placeholder="Title (50-60 chars)"><textarea id="metaDesc" rows=3 placeholder="Description (150-160 chars)"></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="doMeta">Preview</button></div><div id="metaOut" style="margin-top:8px"></div>`;
  document.getElementById('doMeta').onclick = ()=>{
    const t=document.getElementById('metaTitle').value; const d=document.getElementById('metaDesc').value;
    document.getElementById('metaOut').innerHTML = `<strong>Title:</strong> ${t}<br/><small>Length: ${t.length}</small><br/><br/><strong>Description:</strong> ${d}<br/><small>Length: ${d.length}</small>`;
  };
}

/* Email writer */
function renderEmailWriter(container){
  container.innerHTML = `
    <input id="emailFor" placeholder="Purpose (e.g., job application)"/>
    <input id="emailTo" placeholder="Recipient name (optional)"/>
    <div class="actions" style="margin-top:8px"><button class="btn" id="genEmail">Generate Email</button></div>
    <div id="emailOut" style="margin-top:8px;white-space:pre-wrap"></div>
  `;
  document.getElementById('genEmail').onclick = ()=>{
    const p=document.getElementById('emailFor').value||'request';
    const r=document.getElementById('emailTo').value||'Sir/Madam';
    const template = `Hello ${r},\n\nI hope you are well. I am writing to ${p}. I have relevant experience and would like to discuss further. Please let me know a suitable time.\n\nRegards,\n[Your Name]`;
    document.getElementById('emailOut').innerText = template;
  };
}

/* Password generator */
function renderPassword(container){
  container.innerHTML = `<div class="row"><input id="passLen" type="number" value="12"/><select id="passType"><option value="all">All chars</option><option value="no-symbols">No symbols</option></select></div><div class="actions" style="margin-top:8px"><button class="btn" id="genPass">Generate</button></div><div id="passOut" style="margin-top:8px"></div>`;
  document.getElementById('genPass').onclick = ()=>{
    const len = Math.max(6, parseInt(document.getElementById('passLen').value)||12);
    const type = document.getElementById('passType').value;
    const sets = {lower:'abcdefghijklmnopqrstuvwxyz', upper:'ABCDEFGHIJKLMNOPQRSTUVWXYZ', nums:'0123456789', sym:'!@#$%^&*()_+-='};
    let pool = sets.lower+sets.upper+sets.nums+(type==='all'?sets.sym:'');
    let p='';
    for(let i=0;i<len;i++) p += pool[Math.floor(Math.random()*pool.length)];
    document.getElementById('passOut').innerText = p;
  };
}

/* QR using external QR server */
function renderQR(container){
  container.innerHTML = `<input id="qrData" placeholder="Text or URL for QR"><div class="actions" style="margin-top:8px"><button class="btn" id="genQrBtn">Create QR</button></div><div id="qrOut" style="margin-top:8px"></div>`;
  document.getElementById('genQrBtn').onclick = ()=>{
    const d = encodeURIComponent(document.getElementById('qrData').value||'https://vishal-ai.github.io');
    const src = `https://api.qrserver.com/v1/create-qr-code/?size=220x220&data=${d}`;
    document.getElementById('qrOut').innerHTML = `<a target="_blank" href="${src}"><img src="${src}" alt="qr"/></a>`;
  };
}

/* Base64 */
function renderBase64(container){
  container.innerHTML = `<textarea id="bIn" rows=4 placeholder="Text..."></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="enc">Encode</button><button class="small" id="dec">Decode</button></div><div id="bOut" style="margin-top:8px"></div>`;
  document.getElementById('enc').onclick = ()=>{ const s = document.getElementById('bIn').value; document.getElementById('bOut').innerText = btoa(unescape(encodeURIComponent(s))); };
  document.getElementById('dec').onclick = ()=>{ try{ const r = decodeURIComponent(escape(atob(document.getElementById('bIn').value))); document.getElementById('bOut').innerText = r; }catch(e){ document.getElementById('bOut').innerText='Invalid base64'; } };
}

/* JSON Formatter */
function renderJSON(container){
  container.innerHTML = `<textarea id="jIn" rows=6 placeholder='Paste JSON array/object'></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="fmtJ">Format</button></div><pre id="jOut" style="margin-top:8px;padding:10px;border-radius:8px;overflow:auto;background:var(--card)"></pre>`;
  document.getElementById('fmtJ').onclick = ()=>{ try{ const o = JSON.parse(document.getElementById('jIn').value); document.getElementById('jOut').innerText = JSON.stringify(o,null,2); }catch(e){ document.getElementById('jOut').innerText = 'Invalid JSON: '+e.message } };
}

/* Markdown to HTML (very simple) */
function renderMarkdown(container){
  container.innerHTML = `<textarea id="mdIn" rows=6 placeholder="# Title\\nSome **bold** text"></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="mdDo">Convert</button></div><div id="mdOut" style="margin-top:8px;padding:10px;border-radius:8px;background:var(--card)"></div>`;
  document.getElementById('mdDo').onclick = ()=>{
    const s = document.getElementById('mdIn').value;
    const html = s.replace(/^# (.*$)/gim,'<h1>$1</h1>').replace(/^## (.*$)/gim,'<h2>$1</h2>').replace(/\*\*(.*?)\*\*/g,'<strong>$1</strong>').replace(/\\n/g,'<br/>');
    document.getElementById('mdOut').innerHTML = html;
  };
}

/* Keyword finder basic */
function renderKeywords(container){
  container.innerHTML = `<textarea id="kwIn" rows=5 placeholder="Paste text..."></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="kwDo">Find Keywords</button></div><div id="kwOut" style="margin-top:8px"></div>`;
  document.getElementById('kwDo').onclick = ()=>{
    const t = document.getElementById('kwIn').value.toLowerCase().replace(/[^a-z0-9\\s]/g,' ');
    const arr = t.split(/\\s+/).filter(w=>w.length>3);
    const freq={};
    arr.forEach(w=>freq[w]= (freq[w]||0)+1);
    const list = Object.keys(freq).sort((a,b)=>freq[b]-freq[a]).slice(0,20).map(k=>`${k} (${freq[k]})`);
    document.getElementById('kwOut').innerText = list.join('\\n');
  };
}

/* Color palette from image (simple sampling) */
function renderPalette(container){
  container.innerHTML = `<input type="file" id="palFile" accept="image/*"/><div class="actions" style="margin-top:8px"><button class="btn" id="palDo">Extract Colors</button></div><div id="palOut" style="margin-top:8px;display:flex;flex-wrap:wrap;gap:8px"></div>`;
  document.getElementById('palDo').onclick = async ()=>{
    const file = document.getElementById('palFile').files[0]; if(!file) return alert('Choose image');
    const img = await loadImg(URL.createObjectURL(file));
    const c = document.createElement('canvas'); c.width=img.width; c.height=img.height;
    const ctx=c.getContext('2d'); ctx.drawImage(img,0,0);
    const data = ctx.getImageData(0,0,c.width,c.height).data;
    const map={};
    for(let i=0;i<data.length;i+=40){ // sample every 10th pixel roughly
      const r=data[i], g=data[i+1], b=data[i+2];
      const key = `${r},${g},${b}`; map[key] = (map[key]||0)+1;
    }
    const colors = Object.keys(map).sort((a,b)=>map[b]-map[a]).slice(0,8);
    const out = document.getElementById('palOut'); out.innerHTML='';
    colors.forEach(k=>{
      const [r,g,b] = k.split(',');
      const hex = rgbToHex(+r,+g,+b);
      const el = document.createElement('div'); el.style.width='80px'; el.style.height='80px'; el.style.borderRadius='8px'; el.style.background=hex; el.style.display='flex'; el.style.alignItems='flex-end'; el.style.justifyContent='center'; el.style.color='#fff'; el.style.fontSize='12px'; el.style.padding='6px'; el.innerText=hex;
      out.appendChild(el);
    });
  };
}

/* Image compressor/resize */
function renderImageCompress(container){
  container.innerHTML = `<input type="file" id="imgFile" accept="image/*"/><div class="row" style="margin-top:8px"><input id="imgWidth" placeholder="Max width (px)" value="800"/></div><div class="actions" style="margin-top:8px"><button class="btn" id="imgDo">Compress & Download</button></div><div id="imgMsg" style="margin-top:8px"></div>`;
  document.getElementById('imgDo').onclick = async ()=>{
    const f = document.getElementById('imgFile').files[0]; if(!f) return alert('Choose image');
    const w = parseInt(document.getElementById('imgWidth').value) || 800;
    const img = await loadImg(URL.createObjectURL(f));
    const scale = Math.min(1, w / img.width);
    const c = document.createElement('canvas'); c.width = Math.round(img.width*scale); c.height = Math.round(img.height*scale);
    const ctx=c.getContext('2d'); ctx.drawImage(img,0,0,c.width,c.height);
    c.toBlob(blob=>{
      const url = URL.createObjectURL(blob);
      const a=document.createElement('a'); a.href=url; a.download = 'compressed.jpg'; a.click();
      document.getElementById('imgMsg').innerText = 'Downloaded compressed image.';
    }, 'image/jpeg', 0.75);
  };
}

/* Convert to WebP */
function renderImageWebP(container){
  container.innerHTML = `<input type="file" id="webpFile" accept="image/*"/><div class="actions" style="margin-top:8px"><button class="btn" id="webpDo">Convert to WebP & Download</button></div><div id="webpMsg" style="margin-top:8px"></div>`;
  document.getElementById('webpDo').onclick = async ()=>{
    const f=document.getElementById('webpFile').files[0]; if(!f) return alert('Select image');
    const img=await loadImg(URL.createObjectURL(f));
    const c=document.createElement('canvas'); c.width=img.width; c.height=img.height;
    c.getContext('2d').drawImage(img,0,0);
    c.toBlob(b=>{ const u=URL.createObjectURL(b); const a=document.createElement('a'); a.href=u; a.download='image.webp'; a.click(); document.getElementById('webpMsg').innerText='Downloaded webp.'; }, 'image/webp', 0.8);
  };
}

/* Grayscale */
function renderImageGray(container){
  container.innerHTML = `<input type="file" id="grayFile" accept="image/*"/><div class="actions" style="margin-top:8px"><button class="btn" id="grayDo">Make Grayscale</button></div><div id="grayOut" style="margin-top:8px"></div>`;
  document.getElementById('grayDo').onclick = async ()=>{
    const f=document.getElementById('grayFile').files[0]; if(!f) return alert('Select image');
    const img=await loadImg(URL.createObjectURL(f));
    const c=document.createElement('canvas'); c.width=img.width; c.height=img.height;
    const ctx=c.getContext('2d'); ctx.drawImage(img,0,0);
    const d=ctx.getImageData(0,0,c.width,c.height);
    for(let i=0;i<d.data.length;i+=4){ const v=0.3*d.data[i]+0.59*d.data[i+1]+0.11*d.data[i+2]; d.data[i]=d.data[i+1]=d.data[i+2]=v; }
    ctx.putImageData(d,0,0);
    document.getElementById('grayOut').innerHTML = `<img src="${c.toDataURL()}" style="max-width:100%"/>`;
  };
}

/* Resize specific */
function renderImageResize(container){
  container.innerHTML = `<input type="file" id="resizeFile" accept="image/*"/><div class="row" style="margin-top:8px"><input id="resizeW" placeholder="Width px" value="600"/><input id="resizeH" placeholder="Height px" value="400"/></div><div class="actions" style="margin-top:8px"><button class="btn" id="resizeDo">Resize & Download</button></div>`;
  document.getElementById('resizeDo').onclick = async ()=>{
    const f=document.getElementById('resizeFile').files[0]; if(!f) return alert('Select image');
    const w=parseInt(document.getElementById('resizeW').value)||600; const h=parseInt(document.getElementById('resizeH').value)||400;
    const img=await loadImg(URL.createObjectURL(f));
    const c=document.createElement('canvas'); c.width=w; c.height=h; c.getContext('2d').drawImage(img,0,0,w,h);
    c.toBlob(b=>{ const a=document.createElement('a'); a.href=URL.createObjectURL(b); a.download='resized.jpg'; a.click(); }, 'image/jpeg', 0.8);
  };
}

/* Resume builder simple */
function renderResume(container){
  container.innerHTML = `<input id="rName" placeholder="Full name"/><input id="rTitle" placeholder="Job title"/><textarea id="rSummary" rows=4 placeholder="Summary"></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="rGen">Generate & Download</button></div><div id="rMsg"></div>`;
  document.getElementById('rGen').onclick = ()=>{
    const name=document.getElementById('rName').value||'Your Name';
    const title=document.getElementById('rTitle').value||'Title';
    const summary=document.getElementById('rSummary').value||'Summary';
    const text = `${name}\n${title}\n\nSummary:\n${summary}\n\nExperience:\n- Add your experience here\n\nSkills:\n- Skill 1\n- Skill 2`;
    const blob = new Blob([text], {type:'text/plain'});
    const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='resume.txt'; a.click();
    document.getElementById('rMsg').innerText='Downloaded resume (txt). You can format it in Word.';
  };
}

/* SEO check */
function renderSEOCheck(container){
  container.innerHTML = `<input id="seoTitle" placeholder="Title"><textarea id="seoDesc" rows=3 placeholder="Description"></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="seoDo">Check</button></div><div id="seoOut" style="margin-top:8px"></div>`;
  document.getElementById('seoDo').onclick = ()=>{ const t=document.getElementById('seoTitle').value; const d=document.getElementById('seoDesc').value; let out=''; out+=`Title length: ${t.length} (ideal 50-60)\\n`; out+=`Desc length: ${d.length} (ideal 150-160)\\n`; if(t.length<30) out+='Title too short.\\n'; if(d.length<80) out+='Description too short.\\n'; document.getElementById('seoOut').innerText = out; };
}

/* Password strength check */
function renderPassCheck(container){
  container.innerHTML = `<input id="chkPass" placeholder="Enter password to test"><div class="actions" style="margin-top:8px"><button class="btn" id="chkDo">Check Strength</button></div><div id="chkOut" style="margin-top:8px"></div>`;
  document.getElementById('chkDo').onclick = ()=>{ const p=document.getElementById('chkPass').value; let score=0; if(p.length>7) score+=2; if(/[A-Z]/.test(p)) score++; if(/[0-9]/.test(p)) score++; if(/[^a-zA-Z0-9]/.test(p)) score++; const label = score>=5?'Very strong':score>=4?'Strong':score>=3?'Medium':'Weak'; document.getElementById('chkOut').innerText = `Score: ${score} → ${label}`; };
}

/* Read Aloud (auto-scroll option) */
function renderReadAloud(container){
  container.innerHTML = `<textarea id="readText" rows=6 placeholder="Paste article..."></textarea><div class="actions"><button class="btn" id="raStart">Start Reading</button><button class="small" id="raStop">Stop</button></div>`;
  const synth = window.speechSynthesis;
  document.getElementById('raStart').onclick = ()=>{
    const t=document.getElementById('readText').value; if(!t) return alert('Paste text');
    const u = new SpeechSynthesisUtterance(t); synth.cancel(); synth.speak(u);
  };
  document.getElementById('raStop').onclick = ()=>{ synth.cancel(); };
}

/* Image links */
function renderImageLinks(container){
  container.innerHTML = `<p>For advanced background remove and AI image generation use these free/demo services:</p>
  <ul><li><a target="_blank" href="https://www.remove.bg/">remove.bg (background remove)</a></li>
  <li><a target="_blank" href="https://app.leonardo.ai/">Leonardo.ai (images)</a> (demo / signup)</li>
  <li><a target="_blank" href="https://huggingface.co/spaces">Hugging Face Spaces</a> (many free demos)</li></ul>`;
}

/* Tool ideas */
function renderToolIdeas(container){
  container.innerHTML = `<input id="ideaSeed" placeholder="Enter niche (e.g., students)"/><div class="actions" style="margin-top:8px"><button class="btn" id="ideaDo2">Generate Ideas</button></div><div id="ideaOut2" style="margin-top:8px"></div>`;
  document.getElementById('ideaDo2').onclick = ()=>{
    const s=document.getElementById('ideaSeed').value||'general';
    const arr=[`AI summarizer for ${s}`, `Auto caption generator for ${s} images`, `Resume optimizer for ${s}`, `Micro-lessons generator for ${s}`];
    document.getElementById('ideaOut2').innerText = arr.join('\\n• ');
  };
}

/* JSON -> CSV */
function renderJsonToCsv(container){
  container.innerHTML = `<textarea id="jcIn" rows=6 placeholder='Paste JSON array (e.g., [{"a":1,"b":2},...] )'></textarea><div class="actions" style="margin-top:8px"><button class="btn" id="jcDo">Convert</button></div><div id="jcOut" style="margin-top:8px"></div>`;
  document.getElementById('jcDo').onclick = ()=>{
    try{
      const arr = JSON.parse(document.getElementById('jcIn').value);
      if(!Array.isArray(arr)) return alert('JSON must be an array');
      const keys = Array.from(new Set(arr.flatMap(o=>Object.keys(o))));
      const rows = [keys.join(',')].concat(arr.map(o=>keys.map(k=>JSON.stringify(o[k]||'')).join(',')));
      const blob = new Blob([rows.join('\\n')], {type:'text/csv'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='data.csv'; a.click();
      document.getElementById('jcOut').innerText = 'Downloaded CSV';
    }catch(e){ alert('Invalid JSON') }
  };
}

/* Color picker */
function renderColorPicker(container){
  container.innerHTML = `<input type="color" id="colPick" value="#0b63ff"/><input id="colHex" placeholder="#hex code"/><div class="actions" style="margin-top:8px"><button class="btn" id="colUse">Show</button></div><div id="colOut" style="margin-top:8px"></div>`;
  document.getElementById('colUse').onclick = ()=>{
    const v = document.getElementById('colHex').value || document.getElementById('colPick').value;
    document.getElementById('colOut').innerHTML = `<div style="padding:20px;border-radius:8px;background:${v};color:#fff">Color: ${v}</div>`;
  };
}

/* JSON helper - load image */
function loadImg(src){ return new Promise((res,rej)=>{ const i=new Image(); i.onload=()=>res(i); i.onerror=rej; i.src=src; }); }
function rgbToHex(r,g,b){ return '#'+[r,g,b].map(x=>x.toString(16).padStart(2,'0')).join(''); }

/* Utilities - open default tool on load */
window.addEventListener('load',()=>{ /* open default tool? none */ });

</script>
</body>
</html>
